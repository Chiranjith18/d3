Single File Programming Question
Problem Statement



You are given the heads of two sorted linked lists list1 and list2.

Merge the two lists into one sorted list. The list should be made by splicing together the nodes of the first two lists.

Return the head of the merged linked list.



Example 1:



Input: list1 = [1,2,4], list2 = [1,3,4]

Output: [1,1,2,3,4,4]



Example 2:

Input: list1 = [], list2 = []

Output: []



Example 3:

Input: list1 = [], list2 = [0]

Output: [0]

Input format :
The first line contains a space-separated list of integers representing the first sorted linked list. (May be empty.)

The second line contains space-separated list of integers representing the second sorted linked list. (May be empty.)

Output format :
The output prints a list printed in square brackets representing the merged sorted linked list. Elements are comma-separated, and an empty list is represented as [].



Refer to the sample output for the formatting specifications.

Code constraints :
﻿The number of nodes in both lists is in the range [0, 20].

1 ≤ Node.val ≤ 20

Both list1 and list2 are sorted in non-decreasing order.

Sample test cases :
Input 1 :
1 2 4
1 3 4
Output 1 :
[1, 1, 2, 3, 4, 4]
Input 2 :

0
Output 2 :
[0]
Input 3 :


Output 3 :
[]


import java.util.*;
class Node{
    int data;
    Node next;
    Node(int x){
        this.data = x;
    }
}
public class Main{
    public static void main(String[] args){
        Scanner s  =new Scanner(System.in);
       String line1 = s.hasNextLine()?s.nextLine().trim():"";
       String line2 = s.hasNextLine()?s.nextLine().trim():"";
       Node l1 = build(line1);
       Node l2 = build(line2);
      Node head = merge(l1,l2);
      print(head);
      
    }
    
    public static Node build(String line){
        if(line.isEmpty()){
            return null;
        }
        String[] nodes = line.split(" ");
        Node dummy = new Node(-1);
        Node curr = dummy;
        for(String node:nodes){
            curr.next = new Node(Integer.parseInt(node));
            curr = curr.next;
        }
        return dummy.next;
    }
    
    public static Node merge(Node l1,Node l2){
        Node dummy = new Node(-1);
        Node tail = dummy;
        while(l1!=null&&l2!=null){
            if(l1.data<=l2.data){
                tail.next = l1;
                l1 = l1.next;
            }
            else{
                tail.next = l2;
                l2 = l2.next;
            }
            tail = tail.next;
        }
        while(l1!=null){
            tail.next = l1;
            l1 = l1.next;
            tail = tail.next;
        }
        while(l2!=null){
            tail.next = l2;
            l2 = l2.next;
            tail = tail.next;
        }
    
        return dummy.next;
        
    }
    
    public static void print(Node head){
        Node temp = head;
        List<Integer>res = new ArrayList<>();
        while(temp!=null){
            res.add(temp.data);
            temp = temp.next;
        }
        System.out.println(res);
    }
    
    
 
}

