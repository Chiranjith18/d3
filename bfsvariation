Single File Programming Question
Problem Statement



You are given an m x n grid grid of values 0, 1, or 2, where:



each 0 marks an empty land that you can pass by freely,
each 1 marks a building that you cannot pass through, and
each 2 marks an obstacle that you cannot pass through.


You want to build a house on an empty land that reaches all buildings in the shortest total travel distance. You can only move up, down, left, and right.



Return the shortest travel distance for such a house. If it is not possible to build such a house according to the above rules, return -1.



The total travel distance is the sum of the distances between the houses of the friends and the meeting point.



Example 1:



Input: grid = [[1,0,2,0,1],[0,0,0,0,0],[0,0,1,0,0]]

Output: 7

Explanation: Given three buildings at (0,0), (0,4), (2,2), and an obstacle at (0,2). The point (1,2) is an ideal empty land to build a house, as the total travel distance of 3+3+1=7 is minimal.

So, return 7.



Example 2:

Input: grid = [[1,0]]

Output: 1



Example 3:

Input: grid = [[1]]

Output: -1

Input format :
The first line contains two space-separated integers m and n, representing the number of rows and columns in the grid.

Next m lines: Each line contains n space-separated integers (0, 1, or 2) representing the grid layout.

Output format :
The output prints a single integer representing the minimum sum of distances from the chosen land to all buildings, or -1 if no valid land can reach all buildings.



Refer to the sample output for the formatting specifications.

Code constraints :
1 ≤ m, n ≤ 50

Grid cells contain only values: 0 (empty), 1 (building), or 2 (obstacle)

There is at least one building in the grid

Sample test cases :
Input 1 :
3 5
1 0 2 0 1
0 0 0 0 0
0 0 1 0 0
Output 1 :
7
Input 2 :
1 2
1 0
Output 2 :
1
Input 3 :
1 1
1
Output 3 :
-1

import java.util.*;

public class Main {
    
    public static int shortestDistance(int[][] grid) {
        int m = grid.length, n = grid[0].length;
        int[][] distance = new int[m][n];
        int[][] reach = new int[m][n];
        
        int totalBuildings = 0;
        int[][] directions = {{0,1},{1,0},{-1,0},{0,-1}};
        
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (grid[i][j] == 1) {
                    totalBuildings++;
                    Queue<int[]> q = new LinkedList<>();
                    q.offer(new int[]{i, j});
                    
                    boolean[][] visited = new boolean[m][n];
                    visited[i][j] = true;
                    int level = 1;
                    
                    while (!q.isEmpty()) {
                        int sz = q.size();
                        for (int k = 0; k < sz; k++) {
                            int[] cell = q.poll();
                            int x = cell[0], y = cell[1];
                            
                            for (int[] dir : directions) {
                                int nx = x + dir[0], ny = y + dir[1];
                                if (nx >= 0 && ny >= 0 && nx < m && ny < n &&
                                grid[nx][ny] == 0 && !visited[nx][ny]) {
                                    visited[nx][ny] = true;
                                    distance[nx][ny] += level;
                                    reach[nx][ny]++;
                                    q.offer(new int[]{nx, ny});
                                }
                            }
                        }
                        level++;
                    }
                }
            }
        }
        
        int res = Integer.MAX_VALUE;
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (grid[i][j] == 0 && reach[i][j] == totalBuildings) {
                    res = Math.min(res, distance[i][j]);
                }
            }
        }
        
        return (res == Integer.MAX_VALUE) ? -1 : res;
    }
    
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int m = sc.nextInt(), n = sc.nextInt();
        int[][] grid = new int[m][n];
        
        for (int i = 0; i < m; i++)
        for (int j = 0; j < n; j++)
        grid[i][j] = sc.nextInt();
        
        System.out.println(shortestDistance(grid));
    }
}

   
